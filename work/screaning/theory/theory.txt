SOLID
Расшифровка:

Single responsibility — принцип единственной ответственности
Open-closed — принцип открытости / закрытости
Liskov substitution — принцип подстановки Барбары Лисков
Interface segregation — принцип разделения интерфейса
Dependency inversion — принцип инверсии зависимостей

Принцип единственной обязанности / ответственности (single responsibility principle / SRP) обозначает,
что каждый объект должен иметь одну обязанность и эта обязанность должна быть полностью инкапсулирована в класс.
Все его сервисы должны быть направлены исключительно на обеспечение этой обязанности. Подробнее про SRP →

Принцип открытости / закрытости (open-closed principle / OCP) декларирует, что программные сущности (классы, модули, функции и т. п.)
должны быть открыты для расширения, но закрыты для изменения. Это означает, что эти сущности могут менять свое поведение без изменения
их исходного кода. Подробнее про OCP →

Принцип подстановки Барбары Лисков (Liskov substitution principle / LSP) в формулировке Роберта Мартина:
 «функции, которые используют базовый тип, должны иметь возможность использовать подтипы базового типа не зная об этом». Подробнее про LSP →

Принцип разделения интерфейса (interface segregation principle / ISP) в формулировке Роберта Мартина:
«клиенты не должны зависеть от методов, которые они не используют». Принцип разделения интерфейсов говорит о том, что слишком
«толстые» интерфейсы необходимо разделять на более маленькие и специфические,
чтобы клиенты маленьких интерфейсов знали только о методах, которые необходимы им в работе.
В итоге, при изменении метода интерфейса не должны меняться клиенты, которые этот метод не используют. Подробнее про ISP →

Принцип инверсии зависимостей (dependency inversion principle / DIP) — модули верхних уровней не должны зависеть от
модулей нижних уровней, а оба типа модулей должны зависеть от абстракций; сами абстракции не должны зависеть от деталей,
а вот детали должны зависеть от абстракций. Подробнее про DIP →


Транзакции

Уровни изоляции транзакций:
Read uncommitted:
каждая транзакция видит незафиксированные изменения другой транзакции (феномен грязного чтения)

Read committed:
Для этого уровня параллельно исполняющиеся транзакции видят только зафиксированные изменения из других транзакций.
Таким образом, данный уровень обеспечивает защиту от грязного чтения.

Repeatable read:

Уровень, позволяющий предотвратить феномен неповторяющегося чтения.
Т.е. мы не видим в исполняющейся транзакции измененные и удаленные записи другой транзакцией.
Но все еще видим вставленные записи из другой транзакции. Чтение фантомов никуда не уходит.

Serializable
Уровень, при котором транзакции ведут себя как будто ничего более не существует, никакого влияния друг на друга нет.
 В классическом представлении этот уровень избавляет от эффектачтения фантомов.